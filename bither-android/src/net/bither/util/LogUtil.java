/* * Copyright 2014 http://Bither.net * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.bither.util;import java.io.File;import java.io.FileOutputStream;import net.bither.BitherSetting;import android.util.Log;public class LogUtil {	public static void i(String tag, String content) {		if (BitherSetting.LOG_DEBUG) {			Log.i(tag, content);		}	}	public static void d(String tag, String content) {		if (BitherSetting.LOG_DEBUG) {			Log.d(tag, content);		}	}	public static void w(String tag, String content) {		if (BitherSetting.LOG_DEBUG) {			Log.w(tag, content);		}	}	public static void e(String tag, String content) {		if (BitherSetting.LOG_DEBUG) {			Log.e(tag, content);		}	}	/**	 * ��¼��־���ֻ��ϱ��ڵ���	 * 	 * @param savePathStr	 *            ������־·��	 * @param saveFileName	 *            ������־�ļ���	 * @param data	 *            ��־���	 * @param saveTypeStr	 *            �������ͣ�false Ϊ���ǣ�true Ϊԭ���ļ����	 */	public static void recordLog(File savePath, String saveFileName,			String data, boolean saveType) {		FileOutputStream fos = null;		try {			if (!savePath.exists())				savePath.mkdirs();			File saveFile = new File(savePath, saveFileName);			if (!saveType && saveFile.exists()) {				saveFile.delete();				saveFile.createNewFile();				fos = new FileOutputStream(saveFile, saveType);			} else if (saveType && saveFile.exists()) {				fos = new FileOutputStream(saveFile, saveType);			} else if (saveType && !saveFile.exists()) {				saveFile.createNewFile();				fos = new FileOutputStream(saveFile, saveType);			} else {				fos = new FileOutputStream(saveFile, saveType);			}			fos.write(data.getBytes());			fos.close();		} catch (Exception e) {			e.printStackTrace();		} finally {		}	}	// public static void logMemoryStats(Context context) {	// String text = "";	// text += "\nLoadedClassCount=" +	// toMib(android.os.Debug.getLoadedClassCount());	// text += "\nGlobalAllocSize=" +	// toMib(android.os.Debug.getGlobalAllocSize());	// text += "\nGlobalFreedSize=" +	// toMib(android.os.Debug.getGlobalFreedSize());	// text += "\nGlobalExternalAllocSize=" +	// toMib(android.os.Debug.getGlobalExternalAllocSize());	// text += "\nGlobalExternalFreedSize=" +	// toMib(android.os.Debug.getGlobalExternalFreedSize());	// // text += "\nEpicPixels=" + toMib(EpicBitmap.getGlobalPixelCount()*4);	// text += "\nNativeHeapSize=" +	// toMib(android.os.Debug.getNativeHeapSize());	// text += "\nNativeHeapFree=" +	// toMib(android.os.Debug.getNativeHeapFreeSize());	// text += "\nNativeHeapAllocSize=" +	// toMib(android.os.Debug.getNativeHeapAllocatedSize());	// text += "\nThreadAllocSize=" +	// toMib(android.os.Debug.getThreadAllocSize());	//	// text += "\ntotalMemory()=" + toMib(Runtime.getRuntime().totalMemory());	// text += "\nmaxMemory()=" + toMib(Runtime.getRuntime().maxMemory());	// text += "\nfreeMemory()=" + toMib(Runtime.getRuntime().freeMemory());	//	// android.app.ActivityManager.MemoryInfo mi1 = new	// android.app.ActivityManager.MemoryInfo();	// ActivityManager am =	// (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);	// am.getMemoryInfo(mi1);	// text += "\napp.mi.availMem=" + toMib(mi1.availMem);	// text += "\napp.mi.threshold=" + toMib(mi1.threshold);	// text += "\napp.mi.lowMemory=" + mi1.lowMemory;	//	// android.os.Debug.MemoryInfo mi2 = new android.os.Debug.MemoryInfo();	// Debug.getMemoryInfo(mi2);	// text += "\ndbg.mi.dalvikPrivateDirty=" + toMib(mi2.dalvikPrivateDirty);	// text += "\ndbg.mi.dalvikPss=" + toMib(mi2.dalvikPss);	// text += "\ndbg.mi.dalvikSharedDirty=" + toMib(mi2.dalvikSharedDirty);	// text += "\ndbg.mi.nativePrivateDirty=" + toMib(mi2.nativePrivateDirty);	// text += "\ndbg.mi.nativePss=" + toMib(mi2.nativePss);	// text += "\ndbg.mi.nativeSharedDirty=" + toMib(mi2.nativeSharedDirty);	// text += "\ndbg.mi.otherPrivateDirty=" + toMib(mi2.otherPrivateDirty);	// text += "\ndbg.mi.otherPss" + toMib(mi2.otherPss);	// text += "\ndbg.mi.otherSharedDirty=" + toMib(mi2.otherSharedDirty);	//	// }}